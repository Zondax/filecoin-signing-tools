name: "Main"
on:
  - push

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      uid_gid: ${{ steps.get-user.outputs.uid_gid }}
      datetime: ${{ steps.get-datetime.outputs.datetime }}
    steps:
      - id: get-user
        run: echo "::set-output name=uid_gid::$(id -u):$(id -g)"
      - id: get-datetime
        run: echo "::set-output name=datetime::$(date +'%Y%m%d%H%M%S')"

  build:
    needs: [ configure ]
    container:
      image: zondax/rust-ci:latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Restore/Save sscache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/sccache
          key: ${{ runner.os }}-${{ github.run_id }}-${{ needs.configure.outputs.datetime }}
      - run: apt-get update -y && apt-get install -y libusb-1.0.0 libudev-dev
      - name: rustfmt
        run: |
          cargo fmt --version
          cargo fmt -- --check
      - name: clippy
        run: |
          cargo clippy --version
          cargo clippy --all-features --all-targets
      #- name: audit
      #  run: |
      #    cargo audit --version
      #    cargo audit


  tests_rust:
    needs: [ configure, build ]
    runs-on: ubuntu-latest
    container:
      image: zondax/rust-ci:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Restore/Save sscache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/sccache
          key: ${{ runner.os }}-${{ github.run_id }}-${{ needs.configure.outputs.datetime }}
      - run: apt-get update -y && apt-get install -y libusb-1.0.0 libudev-dev
      - name: rust unit tests --all-features
        env:
          LOTUS_SECRET_URL: ${{ secrets.LOTUS_SECRET_URL }}
          LOTUS_SECRET_TOKEN: ${{ secrets.LOTUS_SECRET_TOKEN }}
        run: |
          rustc --version
          cargo --version
          cargo test --lib --all-features


  tests_ffi:
    needs: [ configure, build ]
    runs-on: ubuntu-latest
    container:
      image: zondax/rust-ci:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Restore/Save sscache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/sccache
          key: ${{ runner.os }}-${{ github.run_id }}-${{ needs.configure.outputs.datetime }}
      - name: External dependencies
        run: |
          apt update && apt-get install -y clang default-jdk g++ gcc gnustep gnustep-devel gobjc golang libicu-dev libtinfo5 valgrind zip
      - name: Cbindgen
        run: |
          cd signer-ffi
          rustup install nightly
          rustup default nightly
          cargo install cbindgen
          cbindgen --config cbindgen.toml --crate filecoin-signer-ffi --lang c --output /tmp/filecoin_signer_ffi.h
          cbindgen --config cbindgen.toml --crate filecoin-signer-ffi --lang c++ --output /tmp/filecoin_signer_ffi_cpp.h
      - name: Libraries
        run: |
          cd signer-ffi
          cargo build
          ls ../
          cp ../target/debug/libfilecoin_signer_ffi.so /tmp/libfilecoin_signer_ffi.so
          cargo build --features with-jni
          cp ../target/debug/libfilecoin_signer_ffi.so /tmp/libfilecoin_signer_ffi_java.so
      - run: OUT_DIR=/tmp/c ./.github/scripts/test_c.sh
      - run: OUT_DIR=/tmp/cpp ./.github/scripts/test_cpp.sh
      - run: OUT_DIR=/tmp/go ./.github/scripts/test_go.sh
      - run: OUT_DIR=/tmp/java ./.github/scripts/test_java.sh
      #- run: OUT_DIR=/tmp/kotlin ./.github/scripts/test_kotlin.sh
      - run: OUT_DIR=/tmp/objective-c ./.github/scripts/test_objective-c.sh
      - run: OUT_DIR=/tmp/swift ./.github/scripts/test_swift.sh


  tests_npm:
    needs: [ configure, build ]
    runs-on: ubuntu-latest
    container:
      image: zondax/rust-ci:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - run: cargo --version
      - name: Restore/Save sscache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/sccache
          key: ${{ runner.os }}-${{ github.run_id }}-${{ needs.configure.outputs.datetime }}
      - run: apt-get update && apt-get install -y firefox-esr libnss3
      - run: npm install -g yalc
      - run: make install_wasmpack SILENT=true
      - run: |
          chown -R root:root /github/home
          chown -R root:root /home/github
      # Disabling Chrome (only Firefox) due to  https://github.com/Zondax/filecoin-signing-tools/issues/68
      - run: make test_npm_unit
      - run: make test_npm_node

  devnet:
    needs: [ configure, build ]
    runs-on: ubuntu-latest
    container:
      image: zondax/rust-ci:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Restore/Save sscache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/sccache
          key: ${{ runner.os }}-${{ github.run_id }}-${{ needs.configure.outputs.datetime }}
      - run: npm install -g yalc
      - run: make install_wasmpack SILENT=true
      - run: make link_npm
      - run: cd examples/wasm_node && yarn test:pc
